#!/usr/bin/env vtkpython
# -*- python -*-
#
from PyQt4.QtGui import *
from PyQt4.QtCore import *
import sys, os, re
import icons


from code import InteractiveConsole
class FileCacher:
    "Cache the stdout text so we can analyze it before returning it"
    def __init__(self): self.reset()
    def reset(self): self.out = []
    def write(self,line): self.out.append(line)
    def flush(self):
        output = '\n'.join(self.out)
        self.reset()
        return output

class Shell(InteractiveConsole):
    "Wrapper around Python that can filter input/output to the shell"
    def __init__(self):
        self.stdout = sys.stdout
        self.cache = FileCacher()
        InteractiveConsole.__init__(self)
        return

    def get_output(self): sys.stdout = self.cache
    def return_output(self): sys.stdout = self.stdout

    def push(self,line):
        self.get_output()
        # you can filter input here by doing something like
        # line = filter(line)
        InteractiveConsole.push(self,line)
        self.return_output()
        output = self.cache.flush()
        # you can filter the output here by doing something like
        # output = filter(output)
        print output # or do something else with it
        return 

def create_console():
    global sh
    sh = Shell()
    sh.interact()

def main():
    app = QApplication(sys.argv)

    # Initialize icons.
    mydir = re.sub("/[^/]*$", "", os.path.abspath(__file__))
    icons.addSearchPath(mydir + "/icons")
    icons.addSearchPath(mydir + "/../share/libra/icons")

    icon = icons.get("libra_logo256")
    pixmap = icon.pixmap(icon.actualSize(QSize(512,512)))
    splash = QSplashScreen(pixmap)
    splash.show()

    from viewer import Viewer
    viewer = Viewer()
    viewer.show()
    splash.finish(viewer)

    def finalize():
        app.quit()

    app.connect(app, SIGNAL( 'lastWindowClosed()' ), finalize);

#    create_console()

    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
